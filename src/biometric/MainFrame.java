/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biometric;
import javax.swing.JFileChooser;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import java.awt.image.BufferedImage;
import java.awt.Image;
import java.awt.Point;
import java.awt.Graphics2D;
import java.awt.image.VolatileImage;
import java.awt.image.ImageObserver;
import javax.imageio.ImageIO;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.filechooser.FileFilter;

import ij.ImagePlus;
import ij.plugin.ContrastEnhancer;
import ij.plugin.filter.BackgroundSubtracter;
import ij.process.BinaryProcessor;
import ij.process.ByteProcessor;
import ij.process.ImageProcessor;

/**
 *
 * @author admin
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    Details dt=new Details();
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Bell MT", 0, 30)); // NOI18N
        jLabel1.setText("Biometric Encryption");

        jLabel2.setFont(new java.awt.Font("Bell MT", 0, 18)); // NOI18N
        jLabel2.setText("Select Fingerprint");

        jTextField1.setEditable(false);

        jButton1.setFont(new java.awt.Font("Bell MT", 0, 17)); // NOI18N
        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Bell MT", 0, 17)); // NOI18N
        jButton2.setText("Process");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addComponent(jButton2))))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(63, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addGap(73, 73, 73))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try
        {
            JFileChooser fc = new JFileChooser();
            fc.setCurrentDirectory(new File("."));
            fc.setFileFilter(new FileFilter()
            {
                public boolean accept(File f)
                {
                    String name=f.getName().toLowerCase();
                    return name.endsWith(".png") || f.isDirectory();
                }
                public String getDescription()
                {
                    return   "Fingerprint Image ";
                }
            });
            int ch=fc.showOpenDialog(this);
            if(ch==JFileChooser.APPROVE_OPTION)
            {
                String path=fc.getSelectedFile().getAbsolutePath();
                jTextField1.setText(path);                 
                ImageIcon ic=new ImageIcon(path);
                jLabel3.setIcon(ic);
            }
           
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }            
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try
        {
            String path=jTextField1.getText().trim();
            if(path.equals(""))
                JOptionPane.showMessageDialog(this, "Select Image");
            else
            {
                ImagePlus ips=new ImagePlus(path);
                ImageProcessor ipr=ips.getProcessor();
            
                ContrastEnhancer ce=new ContrastEnhancer();
                ce.equalize(ipr);
                ce.stretchHistogram(ipr, 0.1);
            
                BackgroundSubtracter bs=new BackgroundSubtracter();
                bs.subtractBackround(ipr, 50);
                
                BufferedImage bi1=ipr.getBufferedImage();
                ImageIO.write(bi1, "png",new File("back.png"));
                
                Fingerprint fp=FPManager.getFingerprint("back.png");
                fp.setSkeleton(fp.getBinaryImage());
                
                BufferedImage bi2=toBufferedImage(FPManager.toImage(fp.getSkeleton()),12);//fp.getBufferedImage();//binarize(bi1);
                ImageIO.write(bi2, "png", new File("bin.png"));
                
                Fingerprint fp1=holt(fp);
                BufferedImage bi3=toBufferedImage(FPManager.toImage(fp1.getSkeleton()),12);//binarize(bi1);
                ImageIO.write(bi3, "png", new File("thin.png"));
                
                Fingerprint fpr=FPManager.getFingerprint("bin.png");
                Fingerprint fp2=holt(fpr);
                FPManager.mapMinutiaes(fp2);              
                
                
                BufferedImage bb=toBufferedImage(FPManager.toImage(fp2.getSkeleton()),1);
                ImageIO.write(bb, "png",new File("feat.png"));
                
                int k1=fp2.getBifurcations()+fp2.getEndoflines();
                System.out.println(k1+" : "+dt.features.size());
            
                for(int i=0;i<dt.features.size();i++)
                {              
                    for(int j=1;j<i-1;j++)
                    {
                        String a1=dt.features.get(i).toString();
                        String a2=dt.features.get(j).toString();
                        String x[]=a1.split("#");
                        String y[]=a2.split("#"); 
                    
                        double e1=Double.parseDouble(x[0])-Double.parseDouble(y[0]);
                        double e2=Double.parseDouble(x[1])-Double.parseDouble(y[1]);
                        
                        double v1=Math.sqrt((e1*e1)+(e2*e2));
                        double the=Math.abs(Double.parseDouble(x[2])-Double.parseDouble(y[2]));
                        double del=Math.min(the, 360-the);
                   
                        double dis=v1+dt.we*del;
                  
                    if(dis>dt.minDis)
                    {              
                        if(!dt.selFeat.contains(a2))
                        {
                            dt.selFeat.add(a2);                           
                            dt.distance.add(dis);
                        }
                        
                    }
                }
            }
            
            FPManager.reduceMinutiaes(fp1);
                
            BufferedImage bb2=toBufferedImage(FPManager.toImage(fp1.getSkeleton()),1);
            ImageIO.write(bb2, "png",new File("selfeat.png"));
                
                
                PreprocessFrame pf=new PreprocessFrame();
                pf.setTitle("Preprocessing");
                pf.setVisible(true);
                pf.setResizable(false);
                pf.jLabel2.setIcon(new ImageIcon(bi2));
                pf.jLabel3.setIcon(new ImageIcon(bi3));
                pf.jLabel4.setIcon(new ImageIcon(bb2));
                
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    public static Fingerprint holt(Fingerprint fingerprint)
    {
        int width = fingerprint.getWidth();
        int height = fingerprint.getHeight();
        byte image[][] = BasicOperations.copy(fingerprint.getBinaryImage());
        List<Point> points_to_remove = new ArrayList<Point>();
        boolean no_pixels_deleted = false;
       
        while(!no_pixels_deleted)
        {
           
            no_pixels_deleted = true;
           
            for(int c=0; c<1; c++)
            {
                for(int y=1; y<height-1; y++)
                {
                    for(int x=1; x<width-1; x++)
                    {
                       
                        boolean p1 = image[x][y]==1?true:false;
                        boolean p2 = image[x][y-1]==1?true:false;
                        boolean p3 = image[x+1][y-1]==1?true:false;
                        boolean p4 = image[x+1][y]==1?true:false;
                        boolean p5 = image[x+1][y+1]==1?true:false;
                        boolean p6 = image[x][y+1]==1?true:false;
                        boolean p7 = image[x-1][y+1]==1?true:false;
                        boolean p8 = image[x-1][y]==1?true:false;
                        boolean p9 = image[x-1][y-1]==1?true:false;
                       
                        if(image[x][y]==1)
                        {
                            if(!(!BasicOperations.isEdge(x,y,image)||(p4&&p6&&(p2||p8))))
                            {
                                no_pixels_deleted = false;
                                Point p = new Point(x,y);
                                points_to_remove.add(p);
                            }
                        }
                    }
                }
               
                for(int i=0; i<points_to_remove.size(); i++)
                {
                    Point p = points_to_remove.remove(i);
                    image[p.x][p.y] = 0;
                }
            }
        }
       
        //Staircase removal
        for(int y=1; y<height-1; y++)
        {
            for(int x=1; x<width-1; x++)
            {
               
                boolean p1 = image[x][y]==1?true:false;
                boolean p2 = image[x][y-1]==1?true:false;
                boolean p3 = image[x+1][y-1]==1?true:false;
                boolean p4 = image[x+1][y]==1?true:false;
                boolean p5 = image[x+1][y+1]==1?true:false;
                boolean p6 = image[x][y+1]==1?true:false;
                boolean p7 = image[x-1][y+1]==1?true:false;
                boolean p8 = image[x-1][y]==1?true:false;
                boolean p9 = image[x-1][y-1]==1?true:false;
               
                if(image[x][y]==1)
                {
                    if(p2&&(p4&&!p3&&!p7&&(!p8||!p6)||(p8&&!p9&&!p5&&(!p4||!p6))))
                    {
                        image[x][y]=0;
                        continue;
                    }
                    if(p2&&(p4&&!p3&&!p7&&(!p8||!p6)||(p8&&!p9&&!p5&&(!p4||!p6))))
                    {
                        image[x][y]=0;
                        continue;
                    }
                }
            }
        }
       
        fingerprint.setSkeleton(image);
        return fingerprint;
    }
    
    public BufferedImage toBufferedImage(final Image image, final int type)
    {
         BufferedImage buffImg=null;
        try
        {
            if (image instanceof BufferedImage)
                return (BufferedImage) image;
            if (image instanceof VolatileImage)
                return ((VolatileImage) image).getSnapshot();
            //System.out.println("loade 1 ");
            loadImage(image);
            //System.out.println("loade 2 ");
            buffImg = new BufferedImage(image.getWidth(null), image.getHeight(null), type);
            final Graphics2D g2 = buffImg.createGraphics();
            g2.drawImage(image, null, null);
            g2.dispose();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
      return buffImg;
    }

    private void loadImage(final Image image)
    {
        //System.out.println("come 1");
        class StatusObserver implements ImageObserver
        {
            boolean imageLoaded = false;
            public boolean imageUpdate(final Image img, final int infoflags,
          final int x, final int y, final int width, final int height)
            {
          //      System.out.println("come 2");
                if (infoflags == ALLBITS)
                {
            //        System.out.println("come 3");
                    synchronized (this)
                    {
              //          System.out.println("come 4");
                        imageLoaded = true;
                        notify();
                    }
                    return true;
                }
                return false;
            }
            
        }
        final StatusObserver imageStatus = new StatusObserver();
        synchronized (imageStatus) {
              //System.out.println("come 5");
        if (image.getWidth(imageStatus) == -1 || image.getHeight(imageStatus) == -1)
        {
              //System.out.println("come 6");
            while (!imageStatus.imageLoaded)
            {
                try
                {
                //      System.out.println("come 7");
                    imageStatus.wait();
                } catch (InterruptedException ex) {ex.printStackTrace();}
            }
        }
        //System.out.println("comes1 ");
     }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
